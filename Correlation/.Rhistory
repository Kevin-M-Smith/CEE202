xmlValue
base <- xpathApply(chunk, "//ns1:timeSeries/@name")
base
base[1]
unlist(base)
base <- unlist(xpathApply(chunk, "//ns1:timeSeries/@name"))
base
base + "00:000"
paste(base, ":00050")
paste(base, ":00050", sep = "")
sensors <- unlist(xpathApply(chunk, "//ns1:timeSeries/@values"))
sensors
sensors <- xpathApply(chunk, "//ns1:values")
sensors <- xpathApply(chunk, "//ns1:values")
length(sensors)
sensors
sensors[1]
sensors[2]
sensors <- xpathApply(chunk, "//ns1:values")
chunk <- xmlDoc(sensors)
chunk <- xmlRoot(chunk)
chunk <- xmlDoc(sensors[1])
sensors <- xpathApply(chunk, "//ns1:values")
chunk <- xmlDoc(sensors[[1]])
chunk <- xmlRoot(chunk)
observations <- xpathApply(chunk, "//ns1:value")
observations
obs = observations[1]
obs
obs = observations[[1]]
obs
?xmlToDataFrame
?xmlTodataFrame
unlist(observations)
test <- unlist(observations)
test
obs
xmlTreeParse(obs)
htmlTreeParse(obs)
sed
?sed
?grep
?regex
strsplit(obs, "\"")
strsplit(obs, """)
)
()
""
obs
?system
grep(obs)
?grep
letters
grep("[a-b]", letters)
?parse
parse(text = obs)
obs
typeof(obs)
unlist(obs)
typeof(unlist(obs))
obs
str(obs)
print(obs)
typeof(print(obs))
?toString
toString(obs)
obs
obesrvations
obs1 <- observations[1]
obs1
xpathApply(obs1)
xpathApply(observations)
xmlDoc(observations)
xmlRoot(observations)
observations <- xpathApply(chunk, "//ns1:value")
observations <- xpathApply(chunk, "//ns1:value@qualifiers")
observations <- xpathApply(chunk, "//ns1:value/@qualifiers")
observations
qualifiers <- unlist(xpathApply(chunk, "//ns1:value/@qualifiers"))
qualifiers
typeof(qualifiers)
qualifiers <- unlist(xpathApply(chunk, "//@qualifiers"))
qualifiers
qualifiers <- unlist(xpathApply(chunk, "@qualifiers"))
qualifiers
qualifiers <- unlist(xpathApply(chunk, "//@qualifiers"))
values <- unlist(xpathApply(chunk, "//value"))
values
values <- unlist(xpathApply(chunk, "//ns1:value"))
values
values <- unlist(xpathApply(chunk, "//ns1:value", XMLgetvalue))
?XMLvalue
?XMLValue
?xml
values <- unlist(xpathApply(chunk, "//ns1:value", xmlValue))
values
typeof(values)
values[1]
times <- unlist(xpathApply(chunk, "//@dateTime"))
times
typeof(times)
res <- cbind(qualifiers, values, times)
res
res[1,1]
res[1,2]
xpathApply(chunk, "//@dateTime"
)
typeof(xpathApply(chunk, "//@dateTime")
)
?cbind
unlist(xpathApply(chunk, "//ns1:value", XMLgetvalue)) != "P"
unlist(xpathApply(chunk, "//@qualifiers"))
unlist(xpathApply(chunk, "//@qualifiers")) != "P"
res <- cbind(
unlist(xpathApply(chunk, "//@dateTime"),
unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
unlist(xpathApply(chunk, "//@qualifiers")) != P,
)
((()))
res <- cbind(
unlist(xpathApply(chunk, "//@dateTime")),
unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
unlist(xpathApply(chunk, "//@qualifiers")) != P,
)
res <- cbind(
unlist(xpathApply(chunk, "//@dateTime")),
unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
unlist(xpathApply(chunk, "//@qualifiers")) != "P",
)
res <- cbind(
unlist(xpathApply(chunk, "//@dateTime")),
unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
(unlist(xpathApply(chunk, "//@qualifiers")) != "P"),
)
res <- data.frame(
ts <- unlist(xpathApply(chunk, "//@dateTime")),
value <- unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
validated <- (unlist(xpathApply(chunk, "//@qualifiers")) != "P"),
)
ts <- unlist(xpathApply(chunk, "//@dateTime"))
res <- data.frame(
ts <- unlist(xpathApply(chunk, "//@dateTime")))
res <- data.frame(
ts <- unlist(xpathApply(chunk, "//@dateTime")),
value <- unlist(xpathApply(chunk, "//ns1:value", xmlValue)))
res
res <- data.frame(
ts <- unlist(xpathApply(chunk, "//@dateTime")),
value <- unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
validated <- (unlist(xpathApply(chunk, "//@qualifiers")) != "P")
)
res
head(res)
res <- data.frame(
unlist(xpathApply(chunk, "//@dateTime")),
unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
(unlist(xpathApply(chunk, "//@qualifiers")) != "P")
)
res
head(res)
library(DBI)
?DBI
??DBI
dbWriteTable
??dbWriteTable
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), ":memory:")
res
dbWriteTable(con, "data", res, append = TRUE, row.names = FALSE, overwrite = FALSE)
dbReadTable(con, "data")
row.names
dbWriteTable(con, "data", res, append = TRUE, row.names = FALSE, overwrite = FALSE)
dbReadTable(con, "data")
head(dbReadTable(con, "data"))
?obs_url
RCurl
?Rcurl
library(RCurl)
?RCurl
??RCurl
?getURL
?curlPerform
curlPerform(url = url, httpheader = c("Accept-Encoding"="gzip,deflate"))
url = "http://waterservices.usgs.gov/nwis/iv/?format=waterml,1.1&sites=01647600&period=P1D&parameterCd=00060,00065,00045,00095,00010,00062,00054,00036,00035"
curlPerform(url = url, httpheader = c("Accept-Encoding"="gzip,deflate"))
t <- curlPerform(url = url, httpheader = c("Accept-Encoding"="gzip,deflate"))
t <- curlPerform(url = url, httpheader = c(Accept-Encoding="gzip,deflate"))
t <- curlPerform(url = url, httpheader = c(AcceptEncoding="gzip,deflate"))
?xmlTreeParse
url = "http://waterservices.usgs.gov/nwis/iv/?format=waterml,1.1&sites=01647600&period=P1D&parameterCd=00060,00065,00045,00095,00010,00062,00054,00036,00035"
xml = curlPerform(url = url, httpheader = c(AcceptEncoding="gzip,deflate"))
doc <- xmlTreeParse(xml, getDTD = FALSE, useInternalNodes = TRUE)
xml
?curlPerform
?curlPerform
basicTextGatherer()
library('RCurl')
library('XML')
g = basicTextGatherer()
xml = curlPerform(url = url, httpheader = c(AcceptEncoding="gzip,deflate"), writefunction = g)
xml = curlPerform(url = url, writefunction = g, httpheader = c(AcceptEncoding="gzip,deflate"))
?curlPerform
xml = curlPerform(url = url, writefunction = g$update, httpheader = c(AcceptEncoding="gzip,deflate"))
h$value
g$value
g$value()
doc <- xmlTreeParse(g$value(), getDTD = FALSE, useInternalNodes = TRUE)
doc <- xmlRoot(doc)
vars <- xpathApply(doc, "//ns1:timeSeries")
chunk <- xmlDoc(vars[[1]])
chunk <- xmlRoot(chunk)
base <- unlist(xpathApply(chunk, "//ns1:timeSeries/@name"))
sensors <- xpathApply(chunk, "//ns1:values")
chunk <- xmlDoc(sensors[[1]])
chunk <- xmlRoot(chunk)
res <- data.frame(
unlist(xpathApply(chunk, "//@dateTime")),
unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
(unlist(xpathApply(chunk, "//@qualifiers")) != "P")
)
res
system.time()
colnames(res) <- c("ts", "seriesid", "value", "validated", "imported")
Sys.time()
Sys.time()
strftime(Sys.time(), format = "F")
strftime(Sys.time(), format = "%F")
format(Sys.time(), "%a %b %d %X %Y %Z")
format(Sys.time(), "%FT%T")
format(Sys.time(), "%FT%T")
format(Sys.time(), "%FT%T")
format(Sys.time(), "%FT%T")
format(Sys.time(), "%FT%T")
format(Sys.time(), "%FT%T")
format(Sys.time(), "%FT%T")
format(Sys.time(), "%FT%T")
format(Sys.time(), "%FT%T")
format(Sys.time(), "%FT%T")
format(Sys.time(), "%FT%T")
format(Sys.time(), "%FT%T%z")
format(Sys.time(), "%FT%T%z")
format(Sys.time(), "%FT%T%z")
format(Sys.time(), "%FT%T%z")
format(Sys.time(), "%FT%T%z")
format(Sys.time(), "%FT%T%z")
format(Sys.time(), "%FT%T%z")
format(Sys.time(), "%FT%T%z")
format(Sys.time(), "%FT%T%z")
format(Sys.time(), "%FT%T%z")
typeof(format(Sys.time(), "%FT%T%z"))
res <- data.frame(
unlist(xpathApply(chunk, "//@dateTime")),
unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
(unlist(xpathApply(chunk, "//@qualifiers")) != "P"),
format(Sys.time(), "%FT%T%z")
)
res
i = 1
parent <- xmlDoc(vars[i])
parent <- xmlDoc(vars[[i]])
parent <- xmlRoot(parent)
base <- unlist(chunk)
base
baseName <- unlist(xpathApply(chunk, "//ns1:timeSeries/@name"))
baseName
parent <- xmlDoc(vars[[i]])
parent <- xmlRoot(parent)
baseName <- unlist(xpathApply(parent, "//ns1:timeSeries/@name"))
baseName
sensors <- xpathApply(chunk, "//ns1:values")
sensors
length(sensors)
site = 01646500
site
site = "01646500"
g = basicTextGatherer()
url = "http://waterservices.usgs.gov/nwis/iv/?format=waterml,1.1&period=P1D&parameterCd=00060,00065,00045,00095,00010,00062,00054,00036,00035&sites="
url = paste(url, site, sep = "")
xml = curlPerform(url = url, writefunction = g$update, httpheader = c(AcceptEncoding="gzip,deflate"))
doc <- xmlTreeParse(g$value(), getDTD = FALSE, useInternalNodes = TRUE)
doc <- xmlRoot(doc)
vars <- xpathApply(doc, "//ns1:timeSeries")
parent <- xmlDoc(vars[[i]])
parent <- xmlRoot(parent)
baseName <- unlist(xpathApply(parent, "//ns1:timeSeries/@name"))
sensors <- xpathApply(chunk, "//ns1:values")
sensors
length(sensors)
i = 23
i = 2
parent <- xmlDoc(vars[[i]])
parent <- xmlDoc(vars[[i]])
parent <- xmlDoc(vars[[i]])
parent <- xmlDoc(vars[[i]])
parent <- xmlRoot(parent)
baseName <- unlist(xpathApply(parent, "//ns1:timeSeries/@name"))
sensors <- xpathApply(chunk, "//ns1:values")
sensors
length(sensors)
i = 2
vars <- xpathApply(doc, "//ns1:timeSeries")
length(vars)
i = 1
parent <- xmlDoc(vars[[i]])
length(parent)
parent <- xmlRoot(parent)
parent
length(parent)
baseName <- unlist(xpathApply(parent, "//ns1:timeSeries/@name"))
sensors <- xpathApply(parent, "//ns1:values")
length(sensors)
j = 1
child <- xmlDoc(sensors[[j]])
child <- xmlRoot(child)
j
base
baseName
child
res <- unlist(xpathApply(parent, "//ns1:method/@methodID"))
res
res <- unlist(xpathApply(child, "//ns1:method/@methodID"))
res
childName <- unlist(xpathApply(child, "//ns1:method/@methodID")
childName <- unlist(xpathApply(child, "//ns1:method/@methodID"))
res <- (
childName <- unlist(xpathApply(child, "//ns1:method/@methodID"))
(())
childName <- unlist(xpathApply(child, "//ns1:method/@methodID"))
res <- (
paste(parentName, childName, sep = ""),
unlist(xpathApply(chunk, "//@dateTime")),
unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
unlist(xpathApply(chunk, "//@qualifiers")) != "P",
format(Sys.time(), "%FT%T%z")
)
childName <- unlist(xpathApply(child, "//ns1:method/@methodID"))
res <- (
paste(parentName, childName, sep = ""),
unlist(xpathApply(chunk, "//@dateTime")),
unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
unlist(xpathApply(chunk, "//@qualifiers")) != "P",
format(Sys.time(), "%FT%T%z")
)
res <- data.frame(
paste(parentName, childName, sep = ""),
unlist(xpathApply(chunk, "//@dateTime")),
unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
unlist(xpathApply(chunk, "//@qualifiers")) != "P",
format(Sys.time(), "%FT%T%z")
)
parentName <- unlist(xpathApply(parent, "//ns1:timeSeries/@name"))
res <- data.frame(
paste(parentName, childName, sep = ""),
unlist(xpathApply(chunk, "//@dateTime")),
unlist(xpathApply(chunk, "//ns1:value", xmlValue)),
unlist(xpathApply(chunk, "//@qualifiers")) != "P",
format(Sys.time(), "%FT%T%z")
)
res
head(res)
colnames(res) <- c("ts", "seriesid", "value", "validated", "imported")
res
site
head(res)
res$updated <- rep(NULL, nrow(res))
trd
trd
res
head(res)
rep(NULL, 10)
rep("NULL")
res$updated <- rep("NULL", nrow(res))
res
res$updated
site
require(parallel)
?parLapply
?clusterEvalQ
?foreach
library(foreach)
?foreach
?parLapply
runif(3)
runif(3, 1, 3)
floor(runif(3, 1, 3))
floor(runif(3, 1, 3))
floor(runif(3, 1, 3))
floor(runif(3, 1, 3))
floor(runif(3, 1, 3))
floor(runif(3, 1, 3))
floor(runif(3, 1, 3))
floor(runif(3, 1, 3))
floor(runif(3, 1, 3))
floor(runif(3, 1, 3))
floor(runif(3, 1, 3))
floor(runif(3, 1, 4))
floor(runif(3, 1, 4))
floor(runif(3, 1, 4))
floor(runif(3, 1, 4))
floor(runif(3, 1, 4))
floor(runif(3, 1, 4))
floor(runif(3, 1, 4))
floor(runif(3, 1, 4))
floor(runif(3, 1, 4))
floor(runif(3, 1, 4))
floor(runif(3, 1, 4))
floor(runif(3, 1, 4))
df <- replicate(runif(20, 1, 4))
df <- replicate(floor(runif(20, 1, 4)))
?replicate
df <- replicate(10000, floor(runif(20, 1, 4)))
df
df1 <- replicate(10000, floor(runif(20, 1, 4)))
df2 <- replicate(10000, floor(runif(20, 1, 4)))
df1[1,]
df1[1,1]
df1[1,]
dim(df)
df[1]
df[1,]
df[1,1]
df[1:20,1]
df1[1:20, 1]
df2[1:20, 2]
df1
dim(df1)
df1[1:20, 1] - df2[1:20, 2]
((df1[1:20, 1] - df2[1:20, 2])==0)
count((df1[1:20, 1] - df2[1:20, 2])==0)
sum((df1[1:20, 1] - df2[1:20, 2])==0)
sum((df1[1:20, 1] - df2[1:20, 2])==0)
df3 <- sum((df1[1:20, ] - df2[1:20, ])==0)
df3
df3 <- lapply(1:10000, checkanswers)
df1 <- replicate(10000, floor(runif(20, 1, 4)))
df2 <- replicate(10000, floor(runif(20, 1, 4)))
checkAnswers <- function(x){
sum((df1[1:20, x] - df2[1:20, x])==0)
}
df3 <- lapply(1:10000, checkAnswers)
df3
df3 <- sort(df3)
df3 <- lapply(1:10000, checkAnswers)
df3 <- sort(df3)
df3 <- sort(unlist(df3))
df3
which(df3 == 7)
which(df3 == 7)[1]
10000 - which(df3 == 7)[1]
(10000 - which(df3 == 7)[1])/10000
(10000 - which(df3 == 8)[1])/10000
df1 <- replicate(10000, floor(runif(15, 1, 4)))
df2 <- replicate(10000, floor(runif(15, 1, 4)))
checkAnswers <- function(x){
sum((df1[1:15, x] - df2[1:15, x])==0)
}
df3 <- lapply(1:10000, checkAnswers)
df3 <- sort(unlist(df3))
(10000 - which(df3 == 7)[1])/10000
(10000 - which(df3 == 8)[1])/10000
(10000 - which(df3 == 6)[1])/10000
(10000 - which(df3 == 7)[1])/10000
expression(rho)
?expression
escpression(rho)
?expression
corr <- round(cor(rwt, bmi))
str
str("10")
corr <- str(round(cor(rwt, bmi), 2))
?expression
bqoute
?bquote
?bquote
corr <- round(cor(rwt, bmi), 2)
?bquote
expression
?bquote
ggtitle(bquote(test ~ rho == ~ .(corr))
)
library(ggplot2)
ggtitle(bquote(test ~ rho == ~ .(corr))
)
corr = 0.9
ggtitle(bquote(test ~ rho == ~ .(corr))
)
ggplot2 + ggtitle(bquote(test ~ rho == ~ .(corr)))
ggplot + ggtitle(bquote(test ~ rho == ~ .(corr))
)
g <- ggplot() + ggtitle(bquote(test ~ rho == ~ .(corr)))
g
?round
?plotmath
?panderOptions
??panderOptions
setwd("~/Desktop/CEE202/Correlation")
MissAmerica <- read.csv('data/MissAmerica.csv')
MissAmerica
MLB
MLB <-  read.csv('data/MLB.csv')
MLB
head(MLB)
cor(MLB[,1], MLB[,3])
cor(ht, nw)
ht <- MLB[,3]      # 'height'
nw <- MLB[,1] / ht # 'normalized weight'
cor(ht, nw)
head(MLB)
session
?session
??session
sessionInfo()
